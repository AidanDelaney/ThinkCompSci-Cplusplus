
$CATEGORY: Introduction

::Who Defined Computing::[markdown]The formal idea of a computer was defined by {
  ~Richard Stallman #Stallman started the GNU project, he didn't define computation.
  ~Bjarne Stroustrup #Stroustrup introduced C++ a full 50 years after the definition of computation.
  =Alan Turing
}

::Who Introduced C++::[markdown]The C++ language was introduced by {
  ~Dennis Richie #Both Richie and Thompson developed the C programming language on which C++ is based.
  ~Ken Thompson  #Both Richie and Thompson developed the C programming language on which C++ is based.
  =Bjarne Stroustrup
}

::LibreOffice Programming Language::[markdown]The [LibreOffice](https://www.libreoffice.org/) suite is mostly written in {
  =C++
  ~Java
  ~JavaScript
  ~Haskell
}

::Current C++ Version::[markdown]The current version of C++ is {
  =C++17 #Yes, C++ is a modern programming language
  ~C++11 #Nearly, this version of the standard has been superseeded
  ~C++20 #The future calls! We're not on C++20 yet.
  ~C99 #Nope, not a chance. This is a C standard not a C++ standard.
}

::Formal Language::To program a computer we need to use a {
  =formal
  ~informal
} language.

$CATEGORY: Hello World

::Hello World Program::[markdown] The program
```c++
#include <iostream>
int main() {
  std::cout << "Hello, world";
  return 0;
}
```
prints {
  =Hello, world
  ~hello, world
  ~"Hello, world"
} to the console.

::On Whitespace::All of {
  =tab characters, space characters and newlines
  ~space characters and newlines
  ~tab characters and space characters
} are referred to as whitespace characters.

::Program Entry Point::A C++ program begins in a function called {
  =main
  ~Main
  ~begin
  ~start
}

::Identifying ostream::[markdown]The `<<` symbol is known as the {
  =ostream operator
  ~pipey pipe #No. There is another character '|' referred to as pipe.
  ~Guillmets #Although they look like the quotation marks used in the French language, they're not.
}

$CATEGORY: Types

::Int::[markdown] The literal `3` is a/an {
  =int
  ~float  # No. `float`s represent numbers containing a decimal point
  ~string # No, and converting between `string` and `int` is a good way to introduce error into your code!
  ~char   # No, it is a single digit but the character literal for 3 is `'3'`.
}

::Float::[markdown] The literal `3.1415` is a/an {
  ~int    # No, an `int` can only represent a whole number.
  =float
  ~string # No, this would be a mistake as the number above should go into a "number shaped" container.
  ~char
}

::Char::[markdown] The literal `'a'` is a/an {
  ~int
  ~float
  ~string  # No, notice the type of quote marks used in the literal.
  =char
}

::String::[markdown] The literal `"moo"` is a/an {
  ~int
  ~float
  =string
  ~char
}

::Variables::[markdown]If I create `int my_int = 4` can I assign `my_int = 3.14`? {
  =False
  ~True   # No, `my_int` is of type `int`, not of type `float`.
}

$CATEGORY: Functions

::FunctionNames::[markdown]Which of the following is a falid function signature? {
  = `int mult_by_three(int x)`
  ~ `int 3_mult(int x)`
  ~ `int mult by three(int x)`
  ~ `mult_by_three(int x); int`
}

::FunctionParameters::[markdown]Which of the following demonstrates valid parameter passing for `int foo(int x, int y)`? {
  = `int a=3; foo(a, 4);`
  ~ `foo(int 3, 4);`
  ~ `foo(int 3, int 4);`
}

::FunctionReturnValues::[markdown]Given `int foo(int x, int y)` which of these literals would you expect returned? {
  = 3
  ~ 3.14  # No, this is not an `int` literal
  ~ int   # No. You're right that this function returns an `int`, but I'm looking for the `int` literal.
  ~ "3"   # No. This is a `string` containing a single character `3`.

::FunctionsCallingFunctions::[markdown]Can a function call another function? {
  = Yes
  ~ No  # Incorrect.  Even `main` is a function, so we must be able to call functions from functions.

::FunctionRuleOfThumb::As a general rule-of-thumb, how long should be expect our functions to be? {
  = 10 lines of code
  ~ 100 lines of code # No. At this length you may need to consider rewriting the function as a collection of several functions.
  ~ 1000 lines of code # No. A function of this length would be very difficult to write correctly.

$CATEGORY: IO

::cout::[markdown]Which of the following is the correct way to output a string? {
  = `std::cout << "Hi";`
  ~ `std::cout >> "Hi";`
  ~ `std::cout ( "Hi" );`
  ~ `std::cout << string "Hi";`

::cin::[markdown]Which line of code with take a typed int and store it in variable `int x`? {
  = `std::cin >> x`
  ~ `std::cin << x`
  ~ `x = input()`

::IOError::[markdown]What is the output of the following program, given the input "error"
```c++
#include <iostream>

int main() {
  int x = 42;
  std::cin >> x;
  std::cout << x << std::endl;
  return 0;
}
```
{
  = 0
  ~ "Error: 'error' is not a valid input"
  ~ there is no output
  ~ 42
}


$CATEGORY: Conditionals

$CATEGORY: Iteration

$CATEGORY: Lists
